Este es un ejemplo de Github para la comunidad de #mejorandola

Una vez instalas GIT, debes configurarlo:

git config --global user.name "Christian" git config --global user.email "xxxxxx@xxxx.com"

Generando tu Public Key:

ssh-keygen

Leyendo tu llave para copiarla a Github:

cat ~/.ssh/id_rsa.pub

Arrancando tu proyecto:

git init

touch README

git add README

git commit -m "tu primer commit"

-- 
git remote add origin ssh://usuario@miservidor/var/git/nuevo-proyecto.git

-- subir archivos
git push origin master
=============================================================
-- ver si esta conectado
ssh -T git@github.com

-- crear etiqueta version

git push origin v1.5
git tag -a v1.4 -m 'my version 1.4'

git push origin --tags

--configuracion
git config --global user.name "Ernesto Crespo"
git config --list

-- crear branch

git checkout -b desarroolobeta
git branch dev

-- actualizar todas las ramas a master
en master: git merge beta

-- ver accesos remotos
git remote -v
$ git remote

-- remoover 
# borra el branch 'testing'
    git branch -d testing

$ git remote rm paul

-- alias

siguiente manera: git add-commit -m "mensaje"

    git config --global alias.add-commit '!git add . -A && git commit'


====

ignorar

# un comentario - es ignorado
# ningún archivo .a
*.a
# pero si queremos versionar el archivo lib.a, incluse aunque estemos ignorando los archivos .a más arriba
!lib.a
# solo ignorar el archivo TODO del directorio raíz, no de los subdirectorios
/TODO
# ignorar todos los archivos dentro del directorio build/
build/
# ignorar el archivo doc/notes.txt, pero no doc/server/arch.txt
doc/*.txt


# Ignora los ficheros .nib y .xib
*.[xn]ib

# Ignora todos los ficheros acabados en .nib
# Ignora tanto MainWindow.nib y builds/MainWindow.nib
*.nib

#Ignora todos los ficheros que empiecen por "bg-" y acaben en ".jpg"
bg-*.jpg
========================================
Eliminando y renombrando repositorios remotos

Si quieres renombrar una referencia a un repositorio remoto, en versiones recientes de Git puedes ejecutar git remote rename. Por ejemplo, si quieres renombrar pb a paul, puedes hacerlo de la siguiente manera:

$ git remote rename pb paul
$ git remote
origin
paul

Conviene mencionar que esto también cambia el nombre de tus ramas remotas. Lo que antes era referenciado en pb/master ahora está en paul/master.

Si por algún motivo quieres eliminar una referencia —has movido el servidor o ya no estás usando un determinado mirror, o quizás un contribuidor ha dejado de contribuir— puedes usar el comando git remote rm:

$ git remote rm paul
$ git remote
 
========================


git log --pretty=oneline

Esta es una de las situaciones habituales: viendo el log sabemos que el problema está en un archivo de un commit en concreto, y tenemos localizados ambos. En este caso basta con recuperar ese archivo concreto:
$ git show a30ab2ca64d81876c939e16e9dac57c8db6fb103:ruta/al/archivo > ruta/al/archivo.bak
